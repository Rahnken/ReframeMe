/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PublicImport } from './routes/_public'
import { Route as AuthImport } from './routes/_auth'
import { Route as IndexImport } from './routes/index'
import { Route as PublicIndexImport } from './routes/_public/index'
import { Route as PublicRegisterImport } from './routes/_public/register'
import { Route as PublicLoginImport } from './routes/_public/login'
import { Route as AuthDashboardImport } from './routes/_auth/dashboard'
import { Route as AuthProfileIndexImport } from './routes/_auth/profile/index'
import { Route as AuthDashboardIndexImport } from './routes/_auth/dashboard/index'
import { Route as AuthProfileEditImport } from './routes/_auth/profile/edit'
import { Route as AuthDashboardGroupsIndexImport } from './routes/_auth/dashboard/groups/index'
import { Route as AuthDashboardGroupsCreateImport } from './routes/_auth/dashboard/groups/create'
import { Route as AuthDashboardGroupsGroupIdIndexImport } from './routes/_auth/dashboard/groups/$groupId/index'
import { Route as AuthDashboardGroupsGroupIdEditImport } from './routes/_auth/dashboard/groups/$groupId/edit'

// Create/Update Routes

const PublicRoute = PublicImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PublicIndexRoute = PublicIndexImport.update({
  path: '/',
  getParentRoute: () => PublicRoute,
} as any)

const PublicRegisterRoute = PublicRegisterImport.update({
  path: '/register',
  getParentRoute: () => PublicRoute,
} as any)

const PublicLoginRoute = PublicLoginImport.update({
  path: '/login',
  getParentRoute: () => PublicRoute,
} as any)

const AuthDashboardRoute = AuthDashboardImport.update({
  path: '/dashboard',
  getParentRoute: () => AuthRoute,
} as any)

const AuthProfileIndexRoute = AuthProfileIndexImport.update({
  path: '/profile/',
  getParentRoute: () => AuthRoute,
} as any)

const AuthDashboardIndexRoute = AuthDashboardIndexImport.update({
  path: '/',
  getParentRoute: () => AuthDashboardRoute,
} as any)

const AuthProfileEditRoute = AuthProfileEditImport.update({
  path: '/profile/edit',
  getParentRoute: () => AuthRoute,
} as any)

const AuthDashboardGroupsIndexRoute = AuthDashboardGroupsIndexImport.update({
  path: '/groups/',
  getParentRoute: () => AuthDashboardRoute,
} as any)

const AuthDashboardGroupsCreateRoute = AuthDashboardGroupsCreateImport.update({
  path: '/groups/create',
  getParentRoute: () => AuthDashboardRoute,
} as any)

const AuthDashboardGroupsGroupIdIndexRoute =
  AuthDashboardGroupsGroupIdIndexImport.update({
    path: '/groups/$groupId/',
    getParentRoute: () => AuthDashboardRoute,
  } as any)

const AuthDashboardGroupsGroupIdEditRoute =
  AuthDashboardGroupsGroupIdEditImport.update({
    path: '/groups/$groupId/edit',
    getParentRoute: () => AuthDashboardRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_public': {
      preLoaderRoute: typeof PublicImport
      parentRoute: typeof rootRoute
    }
    '/_auth/dashboard': {
      preLoaderRoute: typeof AuthDashboardImport
      parentRoute: typeof AuthImport
    }
    '/_public/login': {
      preLoaderRoute: typeof PublicLoginImport
      parentRoute: typeof PublicImport
    }
    '/_public/register': {
      preLoaderRoute: typeof PublicRegisterImport
      parentRoute: typeof PublicImport
    }
    '/_public/': {
      preLoaderRoute: typeof PublicIndexImport
      parentRoute: typeof PublicImport
    }
    '/_auth/profile/edit': {
      preLoaderRoute: typeof AuthProfileEditImport
      parentRoute: typeof AuthImport
    }
    '/_auth/dashboard/': {
      preLoaderRoute: typeof AuthDashboardIndexImport
      parentRoute: typeof AuthDashboardImport
    }
    '/_auth/profile/': {
      preLoaderRoute: typeof AuthProfileIndexImport
      parentRoute: typeof AuthImport
    }
    '/_auth/dashboard/groups/create': {
      preLoaderRoute: typeof AuthDashboardGroupsCreateImport
      parentRoute: typeof AuthDashboardImport
    }
    '/_auth/dashboard/groups/': {
      preLoaderRoute: typeof AuthDashboardGroupsIndexImport
      parentRoute: typeof AuthDashboardImport
    }
    '/_auth/dashboard/groups/$groupId/edit': {
      preLoaderRoute: typeof AuthDashboardGroupsGroupIdEditImport
      parentRoute: typeof AuthDashboardImport
    }
    '/_auth/dashboard/groups/$groupId/': {
      preLoaderRoute: typeof AuthDashboardGroupsGroupIdIndexImport
      parentRoute: typeof AuthDashboardImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexRoute,
  AuthRoute.addChildren([
    AuthDashboardRoute.addChildren([
      AuthDashboardIndexRoute,
      AuthDashboardGroupsCreateRoute,
      AuthDashboardGroupsIndexRoute,
      AuthDashboardGroupsGroupIdEditRoute,
      AuthDashboardGroupsGroupIdIndexRoute,
    ]),
    AuthProfileEditRoute,
    AuthProfileIndexRoute,
  ]),
  PublicRoute.addChildren([
    PublicLoginRoute,
    PublicRegisterRoute,
    PublicIndexRoute,
  ]),
])

/* prettier-ignore-end */
